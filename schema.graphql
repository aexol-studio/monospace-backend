

type Post implements Node{
	"""
	Post content
	"""
	content: Content!
	"""
	Date it was created in DB
	"""
	createdAt: String!
}

"""
A monospace user with its own mono space containing walls of content
"""
type User implements Node{
	"""
	Wall of user posts
	"""
	wall: [Post!]!
	"""
	Date it was created in DB
	"""
	createdAt: String!
	"""
	Unique username that will be also a part of link for example https://username.imono.space
	"""
	username: String!
	"""
	Files user uploaded to s3
	"""
	uploadedFiles: [File!]
}

"""
Node that all models should implement
"""
interface Node{
	"""
	Date it was created in DB
	"""
	createdAt: String!
}

type UserMutation{
	post(
		postCreate: PostCreate!
	): String!
	uploadFiles(
		files: [FileInput!]! = []
	): [UploadRequestResponse!]!
}

input PostCreate{
	content: String!
}

type Query{
	getUserByUsername(
		userGet: UserGet!
	): User
	me: User!
}

type Mutation{
	"""
	Mutations only allowed inside user scope
	"""
	userMutation: UserMutation
	login(
		loginInput: LoginInput!
	): String
	validate(
		otpInput: OtpInput!
	): String
}

input UserGet{
	username: String!
}

input LoginInput{
	phoneNumber: String!
	username: String!
}

input OtpInput{
	phoneNumber: String!
	code: String!
}

input FileInput{
	name: String!
	type: String!
}

type UploadRequestResponse{
	getUrl: String!
	putUrl: String!
}

type Content{
	content: String!
	files: [File!]
}

type File{
	getUrl: String!
}
schema{
	query: Query,
	mutation: Mutation
}